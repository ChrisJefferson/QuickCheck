# quickcheck, chapter 2
#
# DO NOT EDIT THIS FILE - EDIT EXAMPLES IN THE SOURCE INSTEAD!
#
# This file has been generated by AutoDoc. It contains examples extracted from
# the package documentation. Each example is preceded by a comment which gives
# the name of a GAPDoc XML file and a line range from which the example were
# taken. Note that the XML file in turn may have been generated by AutoDoc
# from some other input.
#
gap> START_TEST("quickcheck01.tst");

# doc/_Chapter_Tutorial.xml:18-24
gap> testFunc := function(a,b)
>     return a*b = b*a;
> end;;
gap> QC_Check([IsInt, IsInt], testFunc);
true

# doc/_Chapter_Tutorial.xml:30-36
gap> QC_Check([IsPerm, IsPerm], testFunc);
Test 60 of 500 failed:
 Input: [ (1,3), (1,3,2) ]
 Output: false
false

# doc/_Chapter_Tutorial.xml:44-47
gap> QC_LastFailure();
rec( args := [ (1,3), (1,3,2) ], func := function( a, b ) ... end )

# doc/_Chapter_Tutorial.xml:53-59
gap> slowIntersection := function(g,h)
>      return Group(Filtered(g, p -> p in h));
> end;;
gap> QC_CheckEqual([IsPermGroup, IsPermGroup], Intersection, slowIntersection);
true

# doc/_Chapter_Tutorial.xml:82-92
gap> checkDiv := function(a,b)
>     if b = 0 then return QC_Skip; fi;
>     return b*(a/b);
> end;;
gap> justA := function(a,b)
> return a;
> end;;
gap> QC_CheckEqual([IsInt, IsInt], checkDiv, justA);
true

# doc/_Chapter_Tutorial.xml:180-194
gap> func := function(x)
>     local a, s;
>     if x < 2 then
>         return QC_Skip;
>     fi;
>     a := AlternatingGroup(x);
>     s := SymmetricGroup(x);
>     if not IsSubgroup(s, a) then return "Not a subgroup"; fi;
>     if s = a then return "Equal!"; fi;
>     return true;
> end;;
gap> QC_Check([IsInt], func);
true

# doc/_Chapter_Tutorial.xml:211-218
gap> makePosInt := function(rs, limit)
>    return Random(rs, [1..limit]);
> end;;
gap> makePerm := function(rs, limit)
>    return Random(rs, SymmetricGroup(limit));
> end;;

# doc/_Chapter_Tutorial.xml:224-227
gap> QC_Check([makePosInt, makePerm, makePerm], {r,p1,p2} -> (r^p1)^p2 = r^(p1*p2));
true

#
gap> STOP_TEST("quickcheck01.tst", 1);
